{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "attack",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "defense",
              "type": "uint8"
            }
          ],
          "internalType": "struct CardBattle.Token[]",
          "name": "tokensArr",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "gameTokensAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CardBattle__IsPlayerAlready",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CardBattle__NeedToInitiateBattle",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CardBattle__NeedToJoinBattles",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CardBattle__NotPlayer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CardBattle__OwnNoCharacter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CardBattle__OwnNoSuchTreasure",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CardBattle__SentOwnerFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CardBattle__SentWrongValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CardBattle__StatusNotCorrect",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "battleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "EndedBattle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "playerAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "RegisteredPlayer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "battleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player1",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "StartedBattle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "WithdrewByOwner",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "characterPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameTokensContract",
      "outputs": [
        {
          "internalType": "contract GameTokens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "battleId",
          "type": "uint256"
        }
      ],
      "name": "getBattle",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint8",
                  "name": "health",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "energy",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256[3]",
                  "name": "battleTokens",
                  "type": "uint256[3]"
                },
                {
                  "internalType": "uint8",
                  "name": "battleAttack",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "battleDefense",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "battleMoveId",
                  "type": "uint8"
                }
              ],
              "internalType": "struct CardBattle.Player[2]",
              "name": "playersInBattle",
              "type": "tuple[2]"
            },
            {
              "internalType": "address",
              "name": "winner",
              "type": "address"
            },
            {
              "internalType": "enum CardBattle.BattleStatus",
              "name": "battleStatus",
              "type": "uint8"
            },
            {
              "internalType": "enum CardBattle.Choice[2]",
              "name": "moves",
              "type": "uint8[2]"
            }
          ],
          "internalType": "struct CardBattle.Battle",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "battleId",
          "type": "uint256"
        }
      ],
      "name": "getBattleStatus",
      "outputs": [
        {
          "internalType": "enum CardBattle.BattleStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getOwnedTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddr",
          "type": "address"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "playerAddr",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "health",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "energy",
              "type": "uint8"
            },
            {
              "internalType": "uint256[3]",
              "name": "battleTokens",
              "type": "uint256[3]"
            },
            {
              "internalType": "uint8",
              "name": "battleAttack",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "battleDefense",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "battleMoveId",
              "type": "uint8"
            }
          ],
          "internalType": "struct CardBattle.Player",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getToken",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "attack",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "defense",
              "type": "uint8"
            }
          ],
          "internalType": "struct CardBattle.Token",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWaitingBattle",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastMintedChar",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "battleId",
          "type": "uint256"
        },
        {
          "internalType": "enum CardBattle.Choice",
          "name": "choice",
          "type": "uint8"
        }
      ],
      "name": "makeMove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintCharacter",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treasureId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintTreasure",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownerWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        }
      ],
      "name": "pickCharacter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "playGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerPlayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasurePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useBerserk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useForceShield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x13fe5f89c07790bb3a18a43e6dec17d440139d14afc923c2077293d8353d3931",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "4950669",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000100000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000001000000000002000000000000000000020000000000000000000000000000000000000000000000000800000000000000000",
    "blockHash": "0xddda6d40d17432bab1f86d0250aa1b00760d7dc98a67b0a87aeb1219082e487e",
    "transactionHash": "0x13fe5f89c07790bb3a18a43e6dec17d440139d14afc923c2077293d8353d3931",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x13fe5f89c07790bb3a18a43e6dec17d440139d14afc923c2077293d8353d3931",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xddda6d40d17432bab1f86d0250aa1b00760d7dc98a67b0a87aeb1219082e487e"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "4950669",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      [
        0,
        0
      ],
      [
        8,
        2
      ],
      [
        7,
        3
      ],
      [
        7,
        3
      ],
      [
        6,
        4
      ],
      [
        6,
        4
      ],
      [
        5,
        5
      ],
      [
        5,
        5
      ],
      [
        1,
        0
      ],
      [
        0,
        1
      ]
    ],
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "22fed0f3fa33b71747f046d895d7d91a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"attack\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"defense\",\"type\":\"uint8\"}],\"internalType\":\"struct CardBattle.Token[]\",\"name\":\"tokensArr\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"gameTokensAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CardBattle__IsPlayerAlready\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CardBattle__NeedToInitiateBattle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CardBattle__NeedToJoinBattles\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CardBattle__NotPlayer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CardBattle__OwnNoCharacter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CardBattle__OwnNoSuchTreasure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CardBattle__SentOwnerFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CardBattle__SentWrongValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CardBattle__StatusNotCorrect\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"EndedBattle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"RegisteredPlayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"StartedBattle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"WithdrewByOwner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"characterPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameTokensContract\",\"outputs\":[{\"internalType\":\"contract GameTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"}],\"name\":\"getBattle\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"health\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"energy\",\"type\":\"uint8\"},{\"internalType\":\"uint256[3]\",\"name\":\"battleTokens\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint8\",\"name\":\"battleAttack\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"battleDefense\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"battleMoveId\",\"type\":\"uint8\"}],\"internalType\":\"struct CardBattle.Player[2]\",\"name\":\"playersInBattle\",\"type\":\"tuple[2]\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"enum CardBattle.BattleStatus\",\"name\":\"battleStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum CardBattle.Choice[2]\",\"name\":\"moves\",\"type\":\"uint8[2]\"}],\"internalType\":\"struct CardBattle.Battle\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"}],\"name\":\"getBattleStatus\",\"outputs\":[{\"internalType\":\"enum CardBattle.BattleStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getOwnedTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"}],\"name\":\"getPlayer\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"health\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"energy\",\"type\":\"uint8\"},{\"internalType\":\"uint256[3]\",\"name\":\"battleTokens\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint8\",\"name\":\"battleAttack\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"battleDefense\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"battleMoveId\",\"type\":\"uint8\"}],\"internalType\":\"struct CardBattle.Player\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getToken\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"attack\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"defense\",\"type\":\"uint8\"}],\"internalType\":\"struct CardBattle.Token\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWaitingBattle\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastMintedChar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"internalType\":\"enum CardBattle.Choice\",\"name\":\"choice\",\"type\":\"uint8\"}],\"name\":\"makeMove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCharacter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"treasureId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintTreasure\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"}],\"name\":\"pickCharacter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerPlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasurePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useBerserk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useForceShield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CardBattle.sol\":\"CardBattle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/CardBattle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./GameTokens.sol\\\";\\n\\ncontract CardBattle is ERC1155Holder, Ownable, ReentrancyGuard {\\n    GameTokens public immutable gameTokensContract;\\n    \\n    uint256 public constant characterPrice = 0.001 ether;\\n    uint256 public constant treasurePrice = 0.0002 ether;\\n    //ToDo1: players pay ETH or buy game tokens (e.g., Gold) to play in the future\\n    //ToDo2: set up reward/prize mechanism (e.g., pay Gold) in the future\\n    //uint256 public constant battlePrice = 0.001 ether;\\n    //uint256 public constant winnerPrize = 0.0018 ether;\\n    //battleId starts from 1\\n    uint256 private lastBattleId = 1;\\n    //easier to check player's new minted character\\n    uint256 public lastMintedChar;\\n\\n    struct Token {\\n        uint8 attack;\\n        uint8 defense;\\n    }\\n\\n    struct Player {\\n        address playerAddr;\\n        //uint256 battleTimes;\\n        uint8 health;\\n        uint8 energy;\\n        //[characterId, treasureId1, treasureId2]\\n        uint256[3] battleTokens;\\n        uint8 battleAttack;\\n        uint8 battleDefense;\\n        uint8 battleMoveId;\\n    }\\n\\n    struct Battle {\\n        Player[2] playersInBattle;\\n        address winner;\\n        BattleStatus battleStatus;\\n        Choice[2] moves;\\n    }\\n\\n    enum BattleStatus {\\n        PENDING,\\n        STARTED,\\n        ENDED\\n    }\\n\\n    enum Choice {\\n        NO,\\n        ATTACK,\\n        DEFENSE\\n    }\\n\\n    //battles waiting for player to join\\n    uint256[] private waitingBattleIds;\\n    //user address to a Player struct\\n    mapping(address => Player) private players;\\n    //user address to tokenId to owned amount\\n    mapping(address => mapping(uint256 => uint256)) private ownedTokens;\\n    //battleId to a Battle struct\\n    mapping(uint256 => Battle) private battles;\\n    //tokenId to token struct\\n    mapping(uint256 => Token) private tokens;\\n    //user address to ether balance\\n    //mapping(address => uint256) private playerBalances;\\n\\n    event RegisteredPlayer(address indexed playerAddr, uint256 time);\\n    event StartedBattle(uint256 indexed battleId, address indexed player1, address indexed player2, uint256 time);\\n    event EndedBattle(uint256 indexed battleId, address indexed winner, uint256 time);\\n    event WithdrewByOwner(address owner, uint256 balance, uint256 time);\\n\\n    error CardBattle__IsPlayerAlready();\\n    error CardBattle__NotPlayer();\\n    error CardBattle__SentWrongValue();\\n    //error CardBattle__NeedToBuyBattles();\\n    error CardBattle__OwnNoCharacter();\\n    error CardBattle__OwnNoSuchTreasure();\\n    error CardBattle__NeedToJoinBattles();\\n    error CardBattle__NeedToInitiateBattle();\\n    error CardBattle__StatusNotCorrect();\\n    error CardBattle__SentOwnerFailed();\\n\\n    modifier isNotPlayer() {\\n        if(players[msg.sender].playerAddr != address(0)) {\\n            revert CardBattle__IsPlayerAlready();\\n        }\\n        _;\\n    }\\n\\n    modifier playerOnly() {\\n        if(players[msg.sender].playerAddr == address(0)) {\\n            revert CardBattle__NotPlayer();\\n        }\\n        _;\\n    }\\n//[[\\\"empty\\\", 0, 0],[\\\"Jeff\\\", 8, 2],[\\\"Charlie\\\", 7, 3],[\\\"Henley\\\", 7, 3],[\\\"Jack\\\", 6, 4],[\\\"Bob\\\", 6, 4],[\\\"Sophie\\\", 5, 5],[\\\"Steve\\\", 5, 5],[\\\"Berserk\\\", 1, 0],[\\\"ForceShield\\\", 0, 1]]\\n    //[[0, 0],[8, 2],[7, 3],[7, 3],[6, 4],[6, 4],[5, 5],[5, 5],[1, 0],[0, 1]]\\n    constructor(Token[] memory tokensArr, address gameTokensAddress) {\\n        _setUpTokens(tokensArr);\\n        gameTokensContract = GameTokens(gameTokensAddress);\\n    }\\n\\n    function _setUpTokens(Token[] memory tokensArr) internal {\\n        for (uint8 i = 0; i <tokensArr.length; i++) {\\n            tokens[i].attack = tokensArr[i].attack;\\n            tokens[i].defense = tokensArr[i].defense;\\n        }\\n    }\\n\\n    function registerPlayer() external isNotPlayer{\\n        players[msg.sender].playerAddr = msg.sender;\\n        players[msg.sender].health = 10;\\n        players[msg.sender].energy = 10;\\n        emit RegisteredPlayer(msg.sender, block.timestamp);\\n    }\\n\\n    function mintCharacter() external payable playerOnly nonReentrant{\\n        if (msg.value != characterPrice) {\\n            revert CardBattle__SentWrongValue();\\n        }\\n        uint256 characterId = _createRandomNum(7, msg.sender);\\n        gameTokensContract.mint(msg.sender, characterId, 1, \\\"\\\");\\n        ownedTokens[msg.sender][characterId]++;\\n        lastMintedChar = characterId;\\n    }\\n\\n    function mintTreasure(uint256 treasureId, uint256 amount) external payable playerOnly nonReentrant{\\n        if (msg.value != treasurePrice * amount) {\\n            revert CardBattle__SentWrongValue();\\n        }\\n        gameTokensContract.mint(msg.sender, treasureId, amount, \\\"\\\");\\n        ownedTokens[msg.sender][treasureId]++;\\n    }\\n\\n    // function buyBattles(uint256 amount) external payable playerOnly{\\n    //     if (msg.value != battlePrice * amount) {\\n    //         revert CardBattle__SentWrongValue();\\n    //     }\\n    //     players[msg.sender].battleTimes += amount;\\n    // }\\n\\n    function pickCharacter(uint256 characterId) external playerOnly{\\n        if (ownedTokens[msg.sender][characterId] <= 0){\\n            revert CardBattle__OwnNoCharacter();\\n        } \\n        players[msg.sender].battleTokens[0] = characterId;\\n    }\\n    //id for Berserk is 8\\n    function useBerserk() external playerOnly{\\n        if (ownedTokens[msg.sender][8] <= 0){\\n            revert CardBattle__OwnNoSuchTreasure();\\n        } \\n        ownedTokens[msg.sender][8]--;\\n        gameTokensContract.burn(msg.sender, 8, 1);\\n        players[msg.sender].battleTokens[1] = 8;\\n    }\\n    //id for Berserk is 9\\n     function useForceShield() external playerOnly{\\n        if (ownedTokens[msg.sender][9] <= 0){\\n            revert CardBattle__OwnNoSuchTreasure();\\n        } \\n        ownedTokens[msg.sender][9]--;\\n        gameTokensContract.burn(msg.sender, 9, 1);\\n        players[msg.sender].battleTokens[2] = 9;\\n    }\\n\\n    function playGame() external playerOnly{\\n        if (waitingBattleIds.length == 0) {\\n            _initiateBattle();\\n        } else {\\n            _joinBattle();\\n        }\\n    }\\n\\n    function _initiateBattle() internal playerOnly{\\n        // if (players[msg.sender].battleTimes <= 0) {\\n        //     revert CardBattle__NeedToBuyBattles();\\n        // }\\n        if (waitingBattleIds.length != 0) {\\n            revert CardBattle__NeedToJoinBattles();\\n        }\\n        //players[msg.sender].battleTimes--;\\n        uint256 characterId = players[msg.sender].battleTokens[0];\\n        uint256 treasureId1 = players[msg.sender].battleTokens[1];\\n        uint256 treasureId2 = players[msg.sender].battleTokens[2];\\n        players[msg.sender].battleAttack = tokens[characterId].attack + tokens[treasureId1].attack;\\n        players[msg.sender].battleDefense = tokens[characterId].defense + tokens[treasureId2].defense;\\n        players[msg.sender].battleMoveId = 0;\\n        uint256 battleId = lastBattleId;\\n        lastBattleId++;\\n        battles[battleId].playersInBattle[0] = players[msg.sender];\\n        waitingBattleIds.push(battleId);\\n    }\\n\\n    function _joinBattle() internal playerOnly{\\n        // if (players[msg.sender].battleTimes <= 0) {\\n        //     revert CardBattle__NeedToBuyBattles();\\n        // }\\n        if (waitingBattleIds.length == 0) {\\n            revert CardBattle__NeedToInitiateBattle();\\n        }\\n        uint256 battleId = waitingBattleIds[0];\\n        address player1 = battles[battleId].playersInBattle[0].playerAddr;\\n        delete waitingBattleIds;\\n        //players[msg.sender].battleTimes--;\\n        uint256 characterId = players[msg.sender].battleTokens[0];\\n        uint256 treasureId1 = players[msg.sender].battleTokens[1];\\n        uint256 treasureId2 = players[msg.sender].battleTokens[2];\\n        players[msg.sender].battleAttack = tokens[characterId].attack + tokens[treasureId1].attack;\\n        players[msg.sender].battleDefense = tokens[characterId].defense + tokens[treasureId2].defense;\\n        players[msg.sender].battleMoveId = 1;\\n        battles[battleId].playersInBattle[1] = players[msg.sender];\\n        battles[battleId].battleStatus = BattleStatus.STARTED;\\n        emit StartedBattle(battleId, player1, msg.sender, block.timestamp);\\n    }\\n\\n    function makeMove(uint256 battleId, Choice choice) external playerOnly{\\n        if (battles[battleId].battleStatus != BattleStatus.STARTED) {\\n            revert CardBattle__StatusNotCorrect();\\n        }\\n        uint8 battleMoveId = players[msg.sender].battleMoveId;\\n        battles[battleId].moves[battleMoveId] = choice;\\n        if (battles[battleId].moves[0] != Choice.NO && battles[battleId].moves[1] != Choice.NO) {\\n            _updateGame(battleId);\\n        }\\n    }\\n\\n    function _updateGame(uint256 battleId) internal {\\n        Player memory player1 = battles[battleId].playersInBattle[0];\\n        Player memory player2 = battles[battleId].playersInBattle[1];\\n        Choice move1 = battles[battleId].moves[0]; \\n        Choice move2 = battles[battleId].moves[1]; \\n        if (move1 == Choice.ATTACK && move2 == Choice.ATTACK) {\\n            player1.health = player1.health - player2.battleAttack;\\n            player2.health = player2.health - player1.battleAttack;\\n            if (player1.health > 0 && player2.health <= 0) {\\n                battles[battleId].winner = player1.playerAddr;\\n                _endBattle(battleId);\\n            } else if (player1.health <= 0 && player2.health > 0) {\\n                battles[battleId].winner = player2.playerAddr;\\n                _endBattle(battleId);\\n            } else if (player1.health <= 0 && player2.health <= 0) {\\n                _endBattle(battleId);\\n            }\\n            player1.energy -= 2;\\n            player2.energy -= 2;\\n            if (player1.energy == 0) {\\n                if (player1.health > player2.health) {\\n                    battles[battleId].winner = player1.playerAddr;\\n                    _endBattle(battleId);\\n                } else if (player1.health < player2.health) {\\n                    battles[battleId].winner = player2.playerAddr;\\n                    _endBattle(battleId);\\n                }\\n                _endBattle(battleId);\\n            }\\n        } else if(move1 == Choice.ATTACK && move2 == Choice.DEFENSE) {\\n            player2.health = player2.health - player1.battleAttack + player2.battleDefense;\\n            if (player1.health > 0 && player2.health <= 0) {\\n                battles[battleId].winner = player1.playerAddr;\\n                _endBattle(battleId);\\n            } else if (player1.health <= 0 && player2.health > 0) {\\n                battles[battleId].winner = player2.playerAddr;\\n                _endBattle(battleId);\\n            } else if (player1.health <= 0 && player2.health <= 0) {\\n                _endBattle(battleId);\\n            }\\n            player1.energy -= 2;\\n            player2.energy -= 2;\\n            if (player1.energy == 0) {\\n                if (player1.health > player2.health) {\\n                    battles[battleId].winner = player1.playerAddr;\\n                    _endBattle(battleId);\\n                } else if (player1.health < player2.health) {\\n                    battles[battleId].winner = player2.playerAddr;\\n                    _endBattle(battleId);\\n                }\\n                _endBattle(battleId);\\n            }\\n        } else if(move1 == Choice.DEFENSE && move2 == Choice.ATTACK) {\\n            player1.health = player1.health - player2.battleAttack + player1.battleDefense;\\n            if (player1.health > 0 && player2.health <= 0) {\\n                battles[battleId].winner = player1.playerAddr;\\n                _endBattle(battleId);\\n            } else if (player1.health <= 0 && player2.health > 0) {\\n                battles[battleId].winner = player2.playerAddr;\\n                _endBattle(battleId);\\n            } else if (player1.health <= 0 && player2.health <= 0) {\\n                _endBattle(battleId);\\n            }\\n            player1.energy -= 2;\\n            player2.energy -= 2;\\n            if (player1.energy == 0) {\\n                if (player1.health > player2.health) {\\n                    battles[battleId].winner = player1.playerAddr;\\n                    _endBattle(battleId);\\n                } else if (player1.health < player2.health) {\\n                    battles[battleId].winner = player2.playerAddr;\\n                    _endBattle(battleId);\\n                }\\n                _endBattle(battleId);\\n            }\\n        } else if(move1 == Choice.DEFENSE && move2 == Choice.DEFENSE) {\\n            player1.energy -= 2;\\n            player2.energy -= 2;\\n            if (player1.energy == 0) {\\n                if (player1.health > player2.health) {\\n                    battles[battleId].winner = player1.playerAddr;\\n                    _endBattle(battleId);\\n                } else if (player1.health < player2.health) {\\n                    battles[battleId].winner = player2.playerAddr;\\n                    _endBattle(battleId);\\n                }\\n                _endBattle(battleId);\\n            }\\n        }\\n    }\\n\\n    function _endBattle(uint256 battleId) internal {\\n        address winner = battles[battleId].winner;\\n        battles[battleId].battleStatus = BattleStatus.ENDED;\\n        emit EndedBattle(battleId, winner, block.timestamp);\\n    }\\n\\n    //internal function to generate a random number\\n    function _createRandomNum(uint256 _max, address _sender) internal view returns (uint256 randomValue) {\\n        uint256 randomNum = uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp, _sender)));\\n        randomValue = randomNum % _max;\\n        //we want it from 1 to _max\\n        return randomValue + 1;\\n    }\\n\\n    function ownerWithdraw() external onlyOwner {\\n        uint256 balance = address(this).balance;\\n        (bool sentOwner,) = payable(msg.sender).call{value:balance}(\\\"\\\");\\n        if (!sentOwner) {\\n            revert CardBattle__SentOwnerFailed();\\n        }\\n        emit WithdrewByOwner(msg.sender, balance, block.timestamp);\\n    }\\n\\n    function getToken(uint256 tokenId) external view returns (Token memory){\\n        return tokens[tokenId];\\n    }\\n\\n    function getPlayer(address playerAddr) external view returns (Player memory){\\n        return players[playerAddr];\\n    }\\n\\n    function getBattle(uint256 battleId) external view returns (Battle memory) {\\n        return battles[battleId];\\n    }\\n\\n    function getBattleStatus(uint256 battleId) external view returns (BattleStatus) {\\n        return battles[battleId].battleStatus;\\n    }\\n\\n    function getWaitingBattle() external view returns (uint256[] memory) {\\n        return waitingBattleIds;\\n    }\\n\\n    function getOwnedTokenAmount(address playerAddr, uint256 tokenId) external view returns(uint256) {\\n        return ownedTokens[playerAddr][tokenId];\\n    }\\n\\n    function getContractBalance() external view returns(uint256) {\\n        return address(this).balance;\\n    }\\n}\\n\",\"keccak256\":\"0x56a8179f9f382b8d2e7003d63ca9d6e0dae274a6561838d833202acf2037ebf2\",\"license\":\"MIT\"},\"contracts/GameTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\n\\ncontract GameTokens is ERC1155 {\\n    //set up ERC1155 tokenIds from 1 to 9\\n    uint256 public constant Jeff = 1;\\n    uint256 public constant Charlie = 2;\\n    uint256 public constant Henley = 3;\\n    uint256 public constant Jack = 4;\\n    uint256 public constant Bob = 5;\\n    uint256 public constant Sophie = 6;\\n    uint256 public constant Steve = 7;\\n    uint256 public constant Berserk = 8;\\n    uint256 public constant ForceShield = 9;\\n\\n    constructor() ERC1155(\\\"ipfs://QmdBAAW5AJ8Yv2zyZYeeQ1bdYUsNQDjxpsTKt3MfmnHhwg/{id}.json\\\") {\\n        \\n    }\\n\\n    function mint(address account, uint256 id, uint256 amount, bytes memory data)\\n        public\\n    {\\n        _mint(account, id, amount, data);\\n    }\\n\\n    function burn(address account, uint256 id, uint256 amount)\\n        public\\n    {\\n        _burn(account, id, amount);\\n    }\\n\\n}\",\"keccak256\":\"0xcd619ae5ef32c44b88691462b0fe3d9ae19ad225a5ce7b4feabc9c1691dd8aad\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405260016002553480156200001657600080fd5b50604051620059403803806200594083398181016040528101906200003c9190620004dc565b6200005c62000050620000b060201b60201c565b620000b860201b60201c565b6001808190555062000074826200017c60201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505050620005ce565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60005b81518160ff1610156200024e57818160ff1681518110620001a557620001a462000542565b5b602002602001015160000151600860008360ff16815260200190815260200160002060000160006101000a81548160ff021916908360ff160217905550818160ff1681518110620001fb57620001fa62000542565b5b602002602001015160200151600860008360ff16815260200190815260200160002060000160016101000a81548160ff021916908360ff16021790555080806200024590620005a0565b9150506200017f565b5050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002b6826200026b565b810181811067ffffffffffffffff82111715620002d857620002d76200027c565b5b80604052505050565b6000620002ed62000252565b9050620002fb8282620002ab565b919050565b600067ffffffffffffffff8211156200031e576200031d6200027c565b5b602082029050602081019050919050565b600080fd5b600080fd5b600060ff82169050919050565b620003518162000339565b81146200035d57600080fd5b50565b600081519050620003718162000346565b92915050565b60006040828403121562000390576200038f62000334565b5b6200039c6040620002e1565b90506000620003ae8482850162000360565b6000830152506020620003c48482850162000360565b60208301525092915050565b6000620003e7620003e18462000300565b620002e1565b905080838252602082019050604084028301858111156200040d576200040c6200032f565b5b835b818110156200043a578062000425888262000377565b8452602084019350506040810190506200040f565b5050509392505050565b600082601f8301126200045c576200045b62000266565b5b81516200046e848260208601620003d0565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620004a48262000477565b9050919050565b620004b68162000497565b8114620004c257600080fd5b50565b600081519050620004d681620004ab565b92915050565b60008060408385031215620004f657620004f56200025c565b5b600083015167ffffffffffffffff81111562000517576200051662000261565b5b620005258582860162000444565b92505060206200053885828601620004c5565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620005ad8262000339565b915060ff8203620005c357620005c262000571565b5b600182019050919050565b60805161533a620006066000396000818161080601528181610b9e01528181610da701528181611b450152611e3a015261533a6000f3fe6080604052600436106101815760003560e01c8063905da9ef116100d1578063cbf5fd2e1161008a578063e4b50cb811610064578063e4b50cb814610519578063f23a6e6114610556578063f2fde38b14610593578063faf039f4146105bc57610181565b8063cbf5fd2e14610486578063d618bb6d146104b1578063d741cb73146104ee57610181565b8063905da9ef1461037657806390aee14d1461039f5780639586d0ce146103dc578063abdef39914610407578063af89973514610432578063bc197c811461044957610181565b80635c07a4b01161013e5780636f9fb98a116101185780636f9fb98a146102e0578063715018a61461030b5780637fd6f7c4146103225780638da5cb5b1461034b57610181565b80635c07a4b01461024f5780635c12cd4b146102665780636dd0ce7a146102a357610181565b806301ffc9a71461018657806304a362ad146101c35780633f647250146101ee5780634311de8f146102055780634fc2baaf1461021c5780635b15693414610233575b600080fd5b34801561019257600080fd5b506101ad60048036038101906101a89190614022565b6105c6565b6040516101ba919061406a565b60405180910390f35b3480156101cf57600080fd5b506101d8610640565b6040516101e5919061409e565b60405180910390f35b3480156101fa57600080fd5b5061020361064a565b005b34801561021157600080fd5b5061021a6108f3565b005b34801561022857600080fd5b506102316109e2565b005b61024d600480360381019061024891906140e5565b610c8b565b005b34801561025b57600080fd5b50610264610ea6565b005b34801561027257600080fd5b5061028d60048036038101906102889190614183565b6110f7565b60405161029a9190614316565b60405180910390f35b3480156102af57600080fd5b506102ca60048036038101906102c59190614332565b61127c565b6040516102d79190614640565b60405180910390f35b3480156102ec57600080fd5b506102f561152c565b604051610302919061409e565b60405180910390f35b34801561031757600080fd5b50610320611534565b005b34801561032e57600080fd5b5061034960048036038101906103449190614681565b611548565b005b34801561035757600080fd5b5061036061182a565b60405161036d91906146d0565b60405180910390f35b34801561038257600080fd5b5061039d60048036038101906103989190614332565b611853565b005b3480156103ab57600080fd5b506103c660048036038101906103c19190614332565b611a03565b6040516103d391906146fa565b60405180910390f35b3480156103e857600080fd5b506103f1611a30565b6040516103fe919061409e565b60405180910390f35b34801561041357600080fd5b5061041c611a36565b604051610429919061409e565b60405180910390f35b34801561043e57600080fd5b50610447611a41565b005b34801561045557600080fd5b50610470600480360381019061046b9190614923565b611b2e565b60405161047d9190614a01565b60405180910390f35b34801561049257600080fd5b5061049b611b43565b6040516104a89190614a7b565b60405180910390f35b3480156104bd57600080fd5b506104d860048036038101906104d39190614a96565b611b67565b6040516104e5919061409e565b60405180910390f35b3480156104fa57600080fd5b50610503611bc2565b6040516105109190614b6d565b60405180910390f35b34801561052557600080fd5b50610540600480360381019061053b9190614332565b611c1a565b60405161054d9190614bbe565b60405180910390f35b34801561056257600080fd5b5061057d60048036038101906105789190614bd9565b611c81565b60405161058a9190614a01565b60405180910390f35b34801561059f57600080fd5b506105ba60048036038101906105b59190614183565b611c96565b005b6105c4611d19565b005b60007f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610639575061063882611f40565b5b9050919050565b65b5e620f4800081565b600073ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610712576040517fc147f17700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060098152602001908152602001600020541161079d576040517f2754a9c900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006009815260200190815260200160002060008154809291906107ff90614c9f565b91905055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f5298aca33600960016040518463ffffffff1660e01b815260040161086393929190614d3e565b600060405180830381600087803b15801561087d57600080fd5b505af1158015610891573d6000803e3d6000fd5b505050506009600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016002600381106108ec576108eb614d75565b5b0181905550565b6108fb611faa565b600047905060003373ffffffffffffffffffffffffffffffffffffffff168260405161092690614dd5565b60006040518083038185875af1925050503d8060008114610963576040519150601f19603f3d011682016040523d82523d6000602084013e610968565b606091505b50509050806109a3576040517fd13ab74a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fed567091ef7b09c7e58c1282f9bce864ddd50be3842439ec2d2f3d6b37d187013383426040516109d693929190614dea565b60405180910390a15050565b600073ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610aaa576040517fc147f17700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600881526020019081526020016000205411610b35576040517f2754a9c900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600881526020019081526020016000206000815480929190610b9790614c9f565b91905055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f5298aca33600860016040518463ffffffff1660e01b8152600401610bfb93929190614e5c565b600060405180830381600087803b158015610c1557600080fd5b505af1158015610c29573d6000803e3d6000fd5b505050506008600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600160038110610c8457610c83614d75565b5b0181905550565b600073ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610d53576040517fc147f17700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d5b612028565b8065b5e620f48000610d6d9190614e93565b3414610da5576040517fbcee9f2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663731133e93384846040518463ffffffff1660e01b8152600401610e0293929190614f09565b600060405180830381600087803b158015610e1c57600080fd5b505af1158015610e30573d6000803e3d6000fd5b50505050600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000815480929190610e9590614f53565b9190505550610ea2612077565b5050565b600073ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f6e576040517f9d78e0b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600a600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160146101000a81548160ff021916908360ff160217905550600a600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160156101000a81548160ff021916908360ff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0d145d16b2bc227dbba053ee8ebad2364e38aebbf3cfe1f04b32b1e2996e5ea2426040516110ed919061409e565b60405180910390a2565b6110ff613de6565b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060e00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460ff1660ff1660ff1681526020016000820160159054906101000a900460ff1660ff1660ff16815260200160018201600380602002604051908101604052809291908260038015611215576020028201915b815481526020019060010190808311611201575b505050505081526020016004820160009054906101000a900460ff1660ff1660ff1681526020016004820160019054906101000a900460ff1660ff1660ff1681526020016004820160029054906101000a900460ff1660ff1660ff16815250509050919050565b611284613e4e565b6007600083815260200190815260200160002060405180608001604052908160008201600280602002604051908101604052809291906000905b82821015611412578382600502016040518060e00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460ff1660ff1660ff1681526020016000820160159054906101000a900460ff1660ff1660ff168152602001600182016003806020026040519081016040528092919082600380156113a3576020028201915b81548152602001906001019080831161138f575b505050505081526020016004820160009054906101000a900460ff1660ff1660ff1681526020016004820160019054906101000a900460ff1660ff1660ff1681526020016004820160029054906101000a900460ff1660ff1660ff1681525050815260200190600101906112be565b505050508152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600a820160149054906101000a900460ff1660028111156114955761149461448c565b5b60028111156114a7576114a661448c565b5b8152602001600b820160028060200260405190810160405280929190826002801561151c576020028201916000905b82829054906101000a900460ff1660028111156114f6576114f561448c565b5b815260200190600101906020826000010492830192600103820291508084116114d65790505b5050505050815250509050919050565b600047905090565b61153c611faa565b6115466000612080565b565b600073ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611610576040517fc147f17700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160028111156116245761162361448c565b5b60076000848152602001908152602001600020600a0160149054906101000a900460ff16600281111561165a5761165961448c565b5b14611691576040517f37e3281d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160029054906101000a900460ff1690508160076000858152602001908152602001600020600b018260ff166002811061171157611710614d75565b5b602091828204019190066101000a81548160ff0219169083600281111561173b5761173a61448c565b5b0217905550600060028111156117545761175361448c565b5b60076000858152602001908152602001600020600b0160006002811061177d5761177c614d75565b5b602091828204019190069054906101000a900460ff1660028111156117a5576117a461448c565b5b141580156118165750600060028111156117c2576117c161448c565b5b60076000858152602001908152602001600020600b016001600281106117eb576117ea614d75565b5b602091828204019190069054906101000a900460ff1660028111156118135761181261448c565b5b14155b156118255761182483612144565b5b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600073ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361191b576040517fc147f17700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054116119a5576040517f544254ad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000600381106119fb576119fa614d75565b5b018190555050565b600060076000838152602001908152602001600020600a0160149054906101000a900460ff169050919050565b60035481565b66038d7ea4c6800081565b600073ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611b09576040517fc147f17700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060048054905003611b2357611b1e612ffb565b611b2c565b611b2b6135e8565b5b565b600063bc197c8160e01b905095945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b60606004805480602002602001604051908101604052809291908181526020018280548015611c1057602002820191906000526020600020905b815481526020019060010190808311611bfc575b5050505050905090565b611c22613eaa565b600860008381526020019081526020016000206040518060400160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff16815250509050919050565b600063f23a6e6160e01b905095945050505050565b611c9e611faa565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611d0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d049061501e565b60405180910390fd5b611d1681612080565b50565b600073ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611de1576040517fc147f17700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611de9612028565b66038d7ea4c680003414611e29576040517fbcee9f2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611e36600733613cba565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663731133e9338360016040518463ffffffff1660e01b8152600401611e969392919061503e565b600060405180830381600087803b158015611eb057600080fd5b505af1158015611ec4573d6000803e3d6000fd5b50505050600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008281526020019081526020016000206000815480929190611f2990614f53565b91905055508060038190555050611f3e612077565b565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611fb2613d11565b73ffffffffffffffffffffffffffffffffffffffff16611fd061182a565b73ffffffffffffffffffffffffffffffffffffffff1614612026576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201d906150d4565b60405180910390fd5b565b60026001540361206d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206490615140565b60405180910390fd5b6002600181905550565b60018081905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006007600083815260200190815260200160002060000160006002811061216f5761216e614d75565b5b600502016040518060e00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460ff1660ff1660ff1681526020016000820160159054906101000a900460ff1660ff1660ff1681526020016001820160038060200260405190810160405280929190826003801561224a576020028201915b815481526020019060010190808311612236575b505050505081526020016004820160009054906101000a900460ff1660ff1660ff1681526020016004820160019054906101000a900460ff1660ff1660ff1681526020016004820160029054906101000a900460ff1660ff1660ff168152505090506000600760008481526020019081526020016000206000016001600281106122d7576122d6614d75565b5b600502016040518060e00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460ff1660ff1660ff1681526020016000820160159054906101000a900460ff1660ff1660ff168152602001600182016003806020026040519081016040528092919082600380156123b2576020028201915b81548152602001906001019080831161239e575b505050505081526020016004820160009054906101000a900460ff1660ff1660ff1681526020016004820160019054906101000a900460ff1660ff1660ff1681526020016004820160029054906101000a900460ff1660ff1660ff16815250509050600060076000858152602001908152602001600020600b0160006002811061243f5761243e614d75565b5b602091828204019190069054906101000a900460ff169050600060076000868152602001908152602001600020600b0160016002811061248257612481614d75565b5b602091828204019190069054906101000a900460ff169050600160028111156124ae576124ad61448c565b5b8260028111156124c1576124c061448c565b5b1480156124f25750600160028111156124dd576124dc61448c565b5b8160028111156124f0576124ef61448c565b5b145b156127e1578260800151846020015161250b9190615160565b846020019060ff16908160ff1681525050836080015183602001516125309190615160565b836020019060ff16908160ff16815250506000846020015160ff1611801561256057506000836020015160ff1611155b156125cc57836000015160076000878152602001908152602001600020600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506125c785613d19565b612688565b6000846020015160ff16111580156125eb57506000836020015160ff16115b1561265757826000015160076000878152602001908152602001600020600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061265285613d19565b612687565b6000846020015160ff161115801561267757506000836020015160ff1611155b156126865761268585613d19565b5b5b5b60028460400181815161269b9190615160565b91509060ff16908160ff16815250506002836040018181516126bd9190615160565b91509060ff16908160ff16815250506000846040015160ff16036127dc57826020015160ff16846020015160ff16111561275857836000015160076000878152602001908152602001600020600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061275385613d19565b6127d2565b826020015160ff16846020015160ff1610156127d157826000015160076000878152602001908152602001600020600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506127d085613d19565b5b5b6127db85613d19565b5b612ff4565b600160028111156127f5576127f461448c565b5b8260028111156128085761280761448c565b5b14801561283857506002808111156128235761282261448c565b5b8160028111156128365761283561448c565b5b145b15612b11578260a00151846080015184602001516128569190615160565b6128609190615195565b836020019060ff16908160ff16815250506000846020015160ff1611801561289057506000836020015160ff1611155b156128fc57836000015160076000878152602001908152602001600020600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506128f785613d19565b6129b8565b6000846020015160ff161115801561291b57506000836020015160ff16115b1561298757826000015160076000878152602001908152602001600020600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061298285613d19565b6129b7565b6000846020015160ff16111580156129a757506000836020015160ff1611155b156129b6576129b585613d19565b5b5b5b6002846040018181516129cb9190615160565b91509060ff16908160ff16815250506002836040018181516129ed9190615160565b91509060ff16908160ff16815250506000846040015160ff1603612b0c57826020015160ff16846020015160ff161115612a8857836000015160076000878152602001908152602001600020600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612a8385613d19565b612b02565b826020015160ff16846020015160ff161015612b0157826000015160076000878152602001908152602001600020600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612b0085613d19565b5b5b612b0b85613d19565b5b612ff3565b600280811115612b2457612b2361448c565b5b826002811115612b3757612b3661448c565b5b148015612b68575060016002811115612b5357612b5261448c565b5b816002811115612b6657612b6561448c565b5b145b15612e41578360a0015183608001518560200151612b869190615160565b612b909190615195565b846020019060ff16908160ff16815250506000846020015160ff16118015612bc057506000836020015160ff1611155b15612c2c57836000015160076000878152602001908152602001600020600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612c2785613d19565b612ce8565b6000846020015160ff1611158015612c4b57506000836020015160ff16115b15612cb757826000015160076000878152602001908152602001600020600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612cb285613d19565b612ce7565b6000846020015160ff1611158015612cd757506000836020015160ff1611155b15612ce657612ce585613d19565b5b5b5b600284604001818151612cfb9190615160565b91509060ff16908160ff1681525050600283604001818151612d1d9190615160565b91509060ff16908160ff16815250506000846040015160ff1603612e3c57826020015160ff16846020015160ff161115612db857836000015160076000878152602001908152602001600020600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612db385613d19565b612e32565b826020015160ff16846020015160ff161015612e3157826000015160076000878152602001908152602001600020600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612e3085613d19565b5b5b612e3b85613d19565b5b612ff2565b600280811115612e5457612e5361448c565b5b826002811115612e6757612e6661448c565b5b148015612e975750600280811115612e8257612e8161448c565b5b816002811115612e9557612e9461448c565b5b145b15612ff157600284604001818151612eaf9190615160565b91509060ff16908160ff1681525050600283604001818151612ed19190615160565b91509060ff16908160ff16815250506000846040015160ff1603612ff057826020015160ff16846020015160ff161115612f6c57836000015160076000878152602001908152602001600020600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612f6785613d19565b612fe6565b826020015160ff16846020015160ff161015612fe557826000015160076000878152602001908152602001600020600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612fe485613d19565b5b5b612fef85613d19565b5b5b5b5b5b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036130c3576040517fc147f17700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060048054905014613102576040517f49f3210d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006003811061315957613158614d75565b5b015490506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016001600381106131b4576131b3614d75565b5b015490506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160026003811061320f5761320e614d75565b5b015490506008600083815260200190815260200160002060000160009054906101000a900460ff166008600085815260200190815260200160002060000160009054906101000a900460ff166132659190615195565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160006101000a81548160ff021916908360ff1602179055506008600082815260200190815260200160002060000160019054906101000a900460ff166008600085815260200190815260200160002060000160019054906101000a900460ff166133119190615195565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160016101000a81548160ff021916908360ff1602179055506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160026101000a81548160ff021916908360ff16021790555060006002549050600260008154809291906133e190614f53565b9190505550600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206007600083815260200190815260200160002060000160006002811061344e5761344d614d75565b5b600502016000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000820160149054906101000a900460ff168160000160146101000a81548160ff021916908360ff1602179055506000820160159054906101000a900460ff168160000160156101000a81548160ff021916908360ff160217905550600182018160010190600361352b929190613eca565b506004820160009054906101000a900460ff168160040160006101000a81548160ff021916908360ff1602179055506004820160019054906101000a900460ff168160040160016101000a81548160ff021916908360ff1602179055506004820160029054906101000a900460ff168160040160026101000a81548160ff021916908360ff160217905550905050600481908060018154018082558091505060019003906000526020600020016000909190919091505550505050565b600073ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036136b0576040517fc147f17700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600480549050036136ef576040517fee7b13ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460008154811061370657613705614d75565b5b9060005260206000200154905060006007600083815260200190815260200160002060000160006002811061373e5761373d614d75565b5b6005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600460006137769190613f07565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000600381106137cd576137cc614d75565b5b015490506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160016003811061382857613827614d75565b5b015490506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160026003811061388357613882614d75565b5b015490506008600083815260200190815260200160002060000160009054906101000a900460ff166008600085815260200190815260200160002060000160009054906101000a900460ff166138d99190615195565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160006101000a81548160ff021916908360ff1602179055506008600082815260200190815260200160002060000160019054906101000a900460ff166008600085815260200190815260200160002060000160019054906101000a900460ff166139859190615195565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160016101000a81548160ff021916908360ff1602179055506001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160026101000a81548160ff021916908360ff160217905550600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060076000878152602001908152602001600020600001600160028110613aa357613aa2614d75565b5b600502016000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000820160149054906101000a900460ff168160000160146101000a81548160ff021916908360ff1602179055506000820160159054906101000a900460ff168160000160156101000a81548160ff021916908360ff1602179055506001820181600101906003613b80929190613eca565b506004820160009054906101000a900460ff168160040160006101000a81548160ff021916908360ff1602179055506004820160019054906101000a900460ff168160040160016101000a81548160ff021916908360ff1602179055506004820160029054906101000a900460ff168160040160026101000a81548160ff021916908360ff160217905550905050600160076000878152602001908152602001600020600a0160146101000a81548160ff02191690836002811115613c4857613c4761448c565b5b02179055503373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16867f76132b4934e8e1180c666b4faf8c43e62f31a77e7554cfe83fc6e66cd2a1b21c42604051613cab919061409e565b60405180910390a45050505050565b600080444284604051602001613cd293929190615233565b6040516020818303038152906040528051906020012060001c90508381613cf9919061529f565b9150600182613d0891906152d0565b91505092915050565b600033905090565b600060076000838152602001908152602001600020600a0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600260076000848152602001908152602001600020600a0160146101000a81548160ff02191690836002811115613d8e57613d8d61448c565b5b02179055508073ffffffffffffffffffffffffffffffffffffffff16827f7ab763991403f1ab5ef7acc377fba3a65b3c9a4b4cd6c17c86bc00898cd6771142604051613dda919061409e565b60405180910390a35050565b6040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600060ff168152602001600060ff168152602001613e2a613f28565b8152602001600060ff168152602001600060ff168152602001600060ff1681525090565b6040518060800160405280613e61613f4a565b8152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006002811115613e9757613e9661448c565b5b8152602001613ea4613f77565b81525090565b6040518060400160405280600060ff168152602001600060ff1681525090565b8260038101928215613ef6579182015b82811115613ef5578254825591600101919060010190613eda565b5b509050613f039190613f99565b5090565b5080546000825590600052602060002090810190613f259190613f99565b50565b6040518060600160405280600390602082028036833780820191505090505090565b60405180604001604052806002905b613f61613de6565b815260200190600190039081613f595790505090565b6040518060400160405280600290602082028036833780820191505090505090565b5b80821115613fb2576000816000905550600101613f9a565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613fff81613fca565b811461400a57600080fd5b50565b60008135905061401c81613ff6565b92915050565b60006020828403121561403857614037613fc0565b5b60006140468482850161400d565b91505092915050565b60008115159050919050565b6140648161404f565b82525050565b600060208201905061407f600083018461405b565b92915050565b6000819050919050565b61409881614085565b82525050565b60006020820190506140b3600083018461408f565b92915050565b6140c281614085565b81146140cd57600080fd5b50565b6000813590506140df816140b9565b92915050565b600080604083850312156140fc576140fb613fc0565b5b600061410a858286016140d0565b925050602061411b858286016140d0565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061415082614125565b9050919050565b61416081614145565b811461416b57600080fd5b50565b60008135905061417d81614157565b92915050565b60006020828403121561419957614198613fc0565b5b60006141a78482850161416e565b91505092915050565b6141b981614145565b82525050565b600060ff82169050919050565b6141d5816141bf565b82525050565b600060039050919050565b600081905092915050565b6000819050919050565b61420481614085565b82525050565b600061421683836141fb565b60208301905092915050565b6000602082019050919050565b614238816141db565b61424281846141e6565b925061424d826141f1565b8060005b8381101561427e578151614265878261420a565b965061427083614222565b925050600181019050614251565b505050505050565b6101208201600082015161429d60008501826141b0565b5060208201516142b060208501826141cc565b5060408201516142c360408501826141cc565b5060608201516142d6606085018261422f565b5060808201516142e960c08501826141cc565b5060a08201516142fc60e08501826141cc565b5060c08201516143106101008501826141cc565b50505050565b60006101208201905061432c6000830184614286565b92915050565b60006020828403121561434857614347613fc0565b5b6000614356848285016140d0565b91505092915050565b600060029050919050565b600081905092915050565b6000819050919050565b6101208201600082015161439660008501826141b0565b5060208201516143a960208501826141cc565b5060408201516143bc60408501826141cc565b5060608201516143cf606085018261422f565b5060808201516143e260c08501826141cc565b5060a08201516143f560e08501826141cc565b5060c08201516144096101008501826141cc565b50505050565b600061441b838361437f565b6101208301905092915050565b6000602082019050919050565b61443e8161435f565b614448818461436a565b925061445382614375565b8060005b8381101561448457815161446b878261440f565b965061447683614428565b925050600181019050614457565b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106144cc576144cb61448c565b5b50565b60008190506144dd826144bb565b919050565b60006144ed826144cf565b9050919050565b6144fd816144e2565b82525050565b600060029050919050565b600081905092915050565b6000819050919050565b600381106145345761453361448c565b5b50565b600081905061454582614523565b919050565b600061455582614537565b9050919050565b6145658161454a565b82525050565b6000614577838361455c565b60208301905092915050565b6000602082019050919050565b61459981614503565b6145a3818461450e565b92506145ae82614519565b8060005b838110156145df5781516145c6878261456b565b96506145d183614583565b9250506001810190506145b2565b505050505050565b6102c0820160008201516145fe6000850182614435565b5060208201516146126102408501826141b0565b5060408201516146266102608501826144f4565b50606082015161463a610280850182614590565b50505050565b60006102c08201905061465660008301846145e7565b92915050565b6003811061466957600080fd5b50565b60008135905061467b8161465c565b92915050565b6000806040838503121561469857614697613fc0565b5b60006146a6858286016140d0565b92505060206146b78582860161466c565b9150509250929050565b6146ca81614145565b82525050565b60006020820190506146e560008301846146c1565b92915050565b6146f4816144e2565b82525050565b600060208201905061470f60008301846146eb565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6147638261471a565b810181811067ffffffffffffffff821117156147825761478161472b565b5b80604052505050565b6000614795613fb6565b90506147a1828261475a565b919050565b600067ffffffffffffffff8211156147c1576147c061472b565b5b602082029050602081019050919050565b600080fd5b60006147ea6147e5846147a6565b61478b565b9050808382526020820190506020840283018581111561480d5761480c6147d2565b5b835b81811015614836578061482288826140d0565b84526020840193505060208101905061480f565b5050509392505050565b600082601f83011261485557614854614715565b5b81356148658482602086016147d7565b91505092915050565b600080fd5b600067ffffffffffffffff82111561488e5761488d61472b565b5b6148978261471a565b9050602081019050919050565b82818337600083830152505050565b60006148c66148c184614873565b61478b565b9050828152602081018484840111156148e2576148e161486e565b5b6148ed8482856148a4565b509392505050565b600082601f83011261490a57614909614715565b5b813561491a8482602086016148b3565b91505092915050565b600080600080600060a0868803121561493f5761493e613fc0565b5b600061494d8882890161416e565b955050602061495e8882890161416e565b945050604086013567ffffffffffffffff81111561497f5761497e613fc5565b5b61498b88828901614840565b935050606086013567ffffffffffffffff8111156149ac576149ab613fc5565b5b6149b888828901614840565b925050608086013567ffffffffffffffff8111156149d9576149d8613fc5565b5b6149e5888289016148f5565b9150509295509295909350565b6149fb81613fca565b82525050565b6000602082019050614a1660008301846149f2565b92915050565b6000819050919050565b6000614a41614a3c614a3784614125565b614a1c565b614125565b9050919050565b6000614a5382614a26565b9050919050565b6000614a6582614a48565b9050919050565b614a7581614a5a565b82525050565b6000602082019050614a906000830184614a6c565b92915050565b60008060408385031215614aad57614aac613fc0565b5b6000614abb8582860161416e565b9250506020614acc858286016140d0565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000602082019050919050565b6000614b1a82614ad6565b614b248185614ae1565b9350614b2f83614af2565b8060005b83811015614b60578151614b47888261420a565b9750614b5283614b02565b925050600181019050614b33565b5085935050505092915050565b60006020820190508181036000830152614b878184614b0f565b905092915050565b604082016000820151614ba560008501826141cc565b506020820151614bb860208501826141cc565b50505050565b6000604082019050614bd36000830184614b8f565b92915050565b600080600080600060a08688031215614bf557614bf4613fc0565b5b6000614c038882890161416e565b9550506020614c148882890161416e565b9450506040614c25888289016140d0565b9350506060614c36888289016140d0565b925050608086013567ffffffffffffffff811115614c5757614c56613fc5565b5b614c63888289016148f5565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614caa82614085565b915060008203614cbd57614cbc614c70565b5b600182039050919050565b6000819050919050565b6000614ced614ce8614ce384614cc8565b614a1c565b614085565b9050919050565b614cfd81614cd2565b82525050565b6000819050919050565b6000614d28614d23614d1e84614d03565b614a1c565b614085565b9050919050565b614d3881614d0d565b82525050565b6000606082019050614d5360008301866146c1565b614d606020830185614cf4565b614d6d6040830184614d2f565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b50565b6000614dbf600083614da4565b9150614dca82614daf565b600082019050919050565b6000614de082614db2565b9150819050919050565b6000606082019050614dff60008301866146c1565b614e0c602083018561408f565b614e19604083018461408f565b949350505050565b6000819050919050565b6000614e46614e41614e3c84614e21565b614a1c565b614085565b9050919050565b614e5681614e2b565b82525050565b6000606082019050614e7160008301866146c1565b614e7e6020830185614e4d565b614e8b6040830184614d2f565b949350505050565b6000614e9e82614085565b9150614ea983614085565b9250828202614eb781614085565b91508282048414831517614ece57614ecd614c70565b5b5092915050565b600082825260208201905092915050565b6000614ef3600083614ed5565b9150614efe82614daf565b600082019050919050565b6000608082019050614f1e60008301866146c1565b614f2b602083018561408f565b614f38604083018461408f565b8181036060830152614f4981614ee6565b9050949350505050565b6000614f5e82614085565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614f9057614f8f614c70565b5b600182019050919050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000615008602683614f9b565b915061501382614fac565b604082019050919050565b6000602082019050818103600083015261503781614ffb565b9050919050565b600060808201905061505360008301866146c1565b615060602083018561408f565b61506d6040830184614d2f565b818103606083015261507e81614ee6565b9050949350505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006150be602083614f9b565b91506150c982615088565b602082019050919050565b600060208201905081810360008301526150ed816150b1565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600061512a601f83614f9b565b9150615135826150f4565b602082019050919050565b600060208201905081810360008301526151598161511d565b9050919050565b600061516b826141bf565b9150615176836141bf565b9250828203905060ff81111561518f5761518e614c70565b5b92915050565b60006151a0826141bf565b91506151ab836141bf565b9250828201905060ff8111156151c4576151c3614c70565b5b92915050565b6000819050919050565b6151e56151e082614085565b6151ca565b82525050565b60008160601b9050919050565b6000615203826151eb565b9050919050565b6000615215826151f8565b9050919050565b61522d61522882614145565b61520a565b82525050565b600061523f82866151d4565b60208201915061524f82856151d4565b60208201915061525f828461521c565b601482019150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006152aa82614085565b91506152b583614085565b9250826152c5576152c4615270565b5b828206905092915050565b60006152db82614085565b91506152e683614085565b92508282019050808211156152fe576152fd614c70565b5b9291505056fea26469706673582212206a64e2d61acfbac41472e4e0b85ce5f149c0f7aa4cfba3eeac92a97328fb143b64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101815760003560e01c8063905da9ef116100d1578063cbf5fd2e1161008a578063e4b50cb811610064578063e4b50cb814610519578063f23a6e6114610556578063f2fde38b14610593578063faf039f4146105bc57610181565b8063cbf5fd2e14610486578063d618bb6d146104b1578063d741cb73146104ee57610181565b8063905da9ef1461037657806390aee14d1461039f5780639586d0ce146103dc578063abdef39914610407578063af89973514610432578063bc197c811461044957610181565b80635c07a4b01161013e5780636f9fb98a116101185780636f9fb98a146102e0578063715018a61461030b5780637fd6f7c4146103225780638da5cb5b1461034b57610181565b80635c07a4b01461024f5780635c12cd4b146102665780636dd0ce7a146102a357610181565b806301ffc9a71461018657806304a362ad146101c35780633f647250146101ee5780634311de8f146102055780634fc2baaf1461021c5780635b15693414610233575b600080fd5b34801561019257600080fd5b506101ad60048036038101906101a89190614022565b6105c6565b6040516101ba919061406a565b60405180910390f35b3480156101cf57600080fd5b506101d8610640565b6040516101e5919061409e565b60405180910390f35b3480156101fa57600080fd5b5061020361064a565b005b34801561021157600080fd5b5061021a6108f3565b005b34801561022857600080fd5b506102316109e2565b005b61024d600480360381019061024891906140e5565b610c8b565b005b34801561025b57600080fd5b50610264610ea6565b005b34801561027257600080fd5b5061028d60048036038101906102889190614183565b6110f7565b60405161029a9190614316565b60405180910390f35b3480156102af57600080fd5b506102ca60048036038101906102c59190614332565b61127c565b6040516102d79190614640565b60405180910390f35b3480156102ec57600080fd5b506102f561152c565b604051610302919061409e565b60405180910390f35b34801561031757600080fd5b50610320611534565b005b34801561032e57600080fd5b5061034960048036038101906103449190614681565b611548565b005b34801561035757600080fd5b5061036061182a565b60405161036d91906146d0565b60405180910390f35b34801561038257600080fd5b5061039d60048036038101906103989190614332565b611853565b005b3480156103ab57600080fd5b506103c660048036038101906103c19190614332565b611a03565b6040516103d391906146fa565b60405180910390f35b3480156103e857600080fd5b506103f1611a30565b6040516103fe919061409e565b60405180910390f35b34801561041357600080fd5b5061041c611a36565b604051610429919061409e565b60405180910390f35b34801561043e57600080fd5b50610447611a41565b005b34801561045557600080fd5b50610470600480360381019061046b9190614923565b611b2e565b60405161047d9190614a01565b60405180910390f35b34801561049257600080fd5b5061049b611b43565b6040516104a89190614a7b565b60405180910390f35b3480156104bd57600080fd5b506104d860048036038101906104d39190614a96565b611b67565b6040516104e5919061409e565b60405180910390f35b3480156104fa57600080fd5b50610503611bc2565b6040516105109190614b6d565b60405180910390f35b34801561052557600080fd5b50610540600480360381019061053b9190614332565b611c1a565b60405161054d9190614bbe565b60405180910390f35b34801561056257600080fd5b5061057d60048036038101906105789190614bd9565b611c81565b60405161058a9190614a01565b60405180910390f35b34801561059f57600080fd5b506105ba60048036038101906105b59190614183565b611c96565b005b6105c4611d19565b005b60007f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610639575061063882611f40565b5b9050919050565b65b5e620f4800081565b600073ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610712576040517fc147f17700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060098152602001908152602001600020541161079d576040517f2754a9c900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006009815260200190815260200160002060008154809291906107ff90614c9f565b91905055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f5298aca33600960016040518463ffffffff1660e01b815260040161086393929190614d3e565b600060405180830381600087803b15801561087d57600080fd5b505af1158015610891573d6000803e3d6000fd5b505050506009600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016002600381106108ec576108eb614d75565b5b0181905550565b6108fb611faa565b600047905060003373ffffffffffffffffffffffffffffffffffffffff168260405161092690614dd5565b60006040518083038185875af1925050503d8060008114610963576040519150601f19603f3d011682016040523d82523d6000602084013e610968565b606091505b50509050806109a3576040517fd13ab74a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fed567091ef7b09c7e58c1282f9bce864ddd50be3842439ec2d2f3d6b37d187013383426040516109d693929190614dea565b60405180910390a15050565b600073ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610aaa576040517fc147f17700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600881526020019081526020016000205411610b35576040517f2754a9c900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600881526020019081526020016000206000815480929190610b9790614c9f565b91905055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f5298aca33600860016040518463ffffffff1660e01b8152600401610bfb93929190614e5c565b600060405180830381600087803b158015610c1557600080fd5b505af1158015610c29573d6000803e3d6000fd5b505050506008600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600160038110610c8457610c83614d75565b5b0181905550565b600073ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610d53576040517fc147f17700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d5b612028565b8065b5e620f48000610d6d9190614e93565b3414610da5576040517fbcee9f2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663731133e93384846040518463ffffffff1660e01b8152600401610e0293929190614f09565b600060405180830381600087803b158015610e1c57600080fd5b505af1158015610e30573d6000803e3d6000fd5b50505050600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000815480929190610e9590614f53565b9190505550610ea2612077565b5050565b600073ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f6e576040517f9d78e0b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600a600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160146101000a81548160ff021916908360ff160217905550600a600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160156101000a81548160ff021916908360ff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0d145d16b2bc227dbba053ee8ebad2364e38aebbf3cfe1f04b32b1e2996e5ea2426040516110ed919061409e565b60405180910390a2565b6110ff613de6565b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060e00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460ff1660ff1660ff1681526020016000820160159054906101000a900460ff1660ff1660ff16815260200160018201600380602002604051908101604052809291908260038015611215576020028201915b815481526020019060010190808311611201575b505050505081526020016004820160009054906101000a900460ff1660ff1660ff1681526020016004820160019054906101000a900460ff1660ff1660ff1681526020016004820160029054906101000a900460ff1660ff1660ff16815250509050919050565b611284613e4e565b6007600083815260200190815260200160002060405180608001604052908160008201600280602002604051908101604052809291906000905b82821015611412578382600502016040518060e00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460ff1660ff1660ff1681526020016000820160159054906101000a900460ff1660ff1660ff168152602001600182016003806020026040519081016040528092919082600380156113a3576020028201915b81548152602001906001019080831161138f575b505050505081526020016004820160009054906101000a900460ff1660ff1660ff1681526020016004820160019054906101000a900460ff1660ff1660ff1681526020016004820160029054906101000a900460ff1660ff1660ff1681525050815260200190600101906112be565b505050508152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600a820160149054906101000a900460ff1660028111156114955761149461448c565b5b60028111156114a7576114a661448c565b5b8152602001600b820160028060200260405190810160405280929190826002801561151c576020028201916000905b82829054906101000a900460ff1660028111156114f6576114f561448c565b5b815260200190600101906020826000010492830192600103820291508084116114d65790505b5050505050815250509050919050565b600047905090565b61153c611faa565b6115466000612080565b565b600073ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611610576040517fc147f17700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160028111156116245761162361448c565b5b60076000848152602001908152602001600020600a0160149054906101000a900460ff16600281111561165a5761165961448c565b5b14611691576040517f37e3281d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160029054906101000a900460ff1690508160076000858152602001908152602001600020600b018260ff166002811061171157611710614d75565b5b602091828204019190066101000a81548160ff0219169083600281111561173b5761173a61448c565b5b0217905550600060028111156117545761175361448c565b5b60076000858152602001908152602001600020600b0160006002811061177d5761177c614d75565b5b602091828204019190069054906101000a900460ff1660028111156117a5576117a461448c565b5b141580156118165750600060028111156117c2576117c161448c565b5b60076000858152602001908152602001600020600b016001600281106117eb576117ea614d75565b5b602091828204019190069054906101000a900460ff1660028111156118135761181261448c565b5b14155b156118255761182483612144565b5b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600073ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361191b576040517fc147f17700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054116119a5576040517f544254ad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000600381106119fb576119fa614d75565b5b018190555050565b600060076000838152602001908152602001600020600a0160149054906101000a900460ff169050919050565b60035481565b66038d7ea4c6800081565b600073ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611b09576040517fc147f17700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060048054905003611b2357611b1e612ffb565b611b2c565b611b2b6135e8565b5b565b600063bc197c8160e01b905095945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b60606004805480602002602001604051908101604052809291908181526020018280548015611c1057602002820191906000526020600020905b815481526020019060010190808311611bfc575b5050505050905090565b611c22613eaa565b600860008381526020019081526020016000206040518060400160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff16815250509050919050565b600063f23a6e6160e01b905095945050505050565b611c9e611faa565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611d0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d049061501e565b60405180910390fd5b611d1681612080565b50565b600073ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611de1576040517fc147f17700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611de9612028565b66038d7ea4c680003414611e29576040517fbcee9f2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611e36600733613cba565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663731133e9338360016040518463ffffffff1660e01b8152600401611e969392919061503e565b600060405180830381600087803b158015611eb057600080fd5b505af1158015611ec4573d6000803e3d6000fd5b50505050600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008281526020019081526020016000206000815480929190611f2990614f53565b91905055508060038190555050611f3e612077565b565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611fb2613d11565b73ffffffffffffffffffffffffffffffffffffffff16611fd061182a565b73ffffffffffffffffffffffffffffffffffffffff1614612026576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201d906150d4565b60405180910390fd5b565b60026001540361206d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206490615140565b60405180910390fd5b6002600181905550565b60018081905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006007600083815260200190815260200160002060000160006002811061216f5761216e614d75565b5b600502016040518060e00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460ff1660ff1660ff1681526020016000820160159054906101000a900460ff1660ff1660ff1681526020016001820160038060200260405190810160405280929190826003801561224a576020028201915b815481526020019060010190808311612236575b505050505081526020016004820160009054906101000a900460ff1660ff1660ff1681526020016004820160019054906101000a900460ff1660ff1660ff1681526020016004820160029054906101000a900460ff1660ff1660ff168152505090506000600760008481526020019081526020016000206000016001600281106122d7576122d6614d75565b5b600502016040518060e00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460ff1660ff1660ff1681526020016000820160159054906101000a900460ff1660ff1660ff168152602001600182016003806020026040519081016040528092919082600380156123b2576020028201915b81548152602001906001019080831161239e575b505050505081526020016004820160009054906101000a900460ff1660ff1660ff1681526020016004820160019054906101000a900460ff1660ff1660ff1681526020016004820160029054906101000a900460ff1660ff1660ff16815250509050600060076000858152602001908152602001600020600b0160006002811061243f5761243e614d75565b5b602091828204019190069054906101000a900460ff169050600060076000868152602001908152602001600020600b0160016002811061248257612481614d75565b5b602091828204019190069054906101000a900460ff169050600160028111156124ae576124ad61448c565b5b8260028111156124c1576124c061448c565b5b1480156124f25750600160028111156124dd576124dc61448c565b5b8160028111156124f0576124ef61448c565b5b145b156127e1578260800151846020015161250b9190615160565b846020019060ff16908160ff1681525050836080015183602001516125309190615160565b836020019060ff16908160ff16815250506000846020015160ff1611801561256057506000836020015160ff1611155b156125cc57836000015160076000878152602001908152602001600020600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506125c785613d19565b612688565b6000846020015160ff16111580156125eb57506000836020015160ff16115b1561265757826000015160076000878152602001908152602001600020600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061265285613d19565b612687565b6000846020015160ff161115801561267757506000836020015160ff1611155b156126865761268585613d19565b5b5b5b60028460400181815161269b9190615160565b91509060ff16908160ff16815250506002836040018181516126bd9190615160565b91509060ff16908160ff16815250506000846040015160ff16036127dc57826020015160ff16846020015160ff16111561275857836000015160076000878152602001908152602001600020600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061275385613d19565b6127d2565b826020015160ff16846020015160ff1610156127d157826000015160076000878152602001908152602001600020600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506127d085613d19565b5b5b6127db85613d19565b5b612ff4565b600160028111156127f5576127f461448c565b5b8260028111156128085761280761448c565b5b14801561283857506002808111156128235761282261448c565b5b8160028111156128365761283561448c565b5b145b15612b11578260a00151846080015184602001516128569190615160565b6128609190615195565b836020019060ff16908160ff16815250506000846020015160ff1611801561289057506000836020015160ff1611155b156128fc57836000015160076000878152602001908152602001600020600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506128f785613d19565b6129b8565b6000846020015160ff161115801561291b57506000836020015160ff16115b1561298757826000015160076000878152602001908152602001600020600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061298285613d19565b6129b7565b6000846020015160ff16111580156129a757506000836020015160ff1611155b156129b6576129b585613d19565b5b5b5b6002846040018181516129cb9190615160565b91509060ff16908160ff16815250506002836040018181516129ed9190615160565b91509060ff16908160ff16815250506000846040015160ff1603612b0c57826020015160ff16846020015160ff161115612a8857836000015160076000878152602001908152602001600020600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612a8385613d19565b612b02565b826020015160ff16846020015160ff161015612b0157826000015160076000878152602001908152602001600020600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612b0085613d19565b5b5b612b0b85613d19565b5b612ff3565b600280811115612b2457612b2361448c565b5b826002811115612b3757612b3661448c565b5b148015612b68575060016002811115612b5357612b5261448c565b5b816002811115612b6657612b6561448c565b5b145b15612e41578360a0015183608001518560200151612b869190615160565b612b909190615195565b846020019060ff16908160ff16815250506000846020015160ff16118015612bc057506000836020015160ff1611155b15612c2c57836000015160076000878152602001908152602001600020600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612c2785613d19565b612ce8565b6000846020015160ff1611158015612c4b57506000836020015160ff16115b15612cb757826000015160076000878152602001908152602001600020600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612cb285613d19565b612ce7565b6000846020015160ff1611158015612cd757506000836020015160ff1611155b15612ce657612ce585613d19565b5b5b5b600284604001818151612cfb9190615160565b91509060ff16908160ff1681525050600283604001818151612d1d9190615160565b91509060ff16908160ff16815250506000846040015160ff1603612e3c57826020015160ff16846020015160ff161115612db857836000015160076000878152602001908152602001600020600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612db385613d19565b612e32565b826020015160ff16846020015160ff161015612e3157826000015160076000878152602001908152602001600020600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612e3085613d19565b5b5b612e3b85613d19565b5b612ff2565b600280811115612e5457612e5361448c565b5b826002811115612e6757612e6661448c565b5b148015612e975750600280811115612e8257612e8161448c565b5b816002811115612e9557612e9461448c565b5b145b15612ff157600284604001818151612eaf9190615160565b91509060ff16908160ff1681525050600283604001818151612ed19190615160565b91509060ff16908160ff16815250506000846040015160ff1603612ff057826020015160ff16846020015160ff161115612f6c57836000015160076000878152602001908152602001600020600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612f6785613d19565b612fe6565b826020015160ff16846020015160ff161015612fe557826000015160076000878152602001908152602001600020600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612fe485613d19565b5b5b612fef85613d19565b5b5b5b5b5b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036130c3576040517fc147f17700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060048054905014613102576040517f49f3210d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006003811061315957613158614d75565b5b015490506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016001600381106131b4576131b3614d75565b5b015490506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160026003811061320f5761320e614d75565b5b015490506008600083815260200190815260200160002060000160009054906101000a900460ff166008600085815260200190815260200160002060000160009054906101000a900460ff166132659190615195565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160006101000a81548160ff021916908360ff1602179055506008600082815260200190815260200160002060000160019054906101000a900460ff166008600085815260200190815260200160002060000160019054906101000a900460ff166133119190615195565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160016101000a81548160ff021916908360ff1602179055506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160026101000a81548160ff021916908360ff16021790555060006002549050600260008154809291906133e190614f53565b9190505550600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206007600083815260200190815260200160002060000160006002811061344e5761344d614d75565b5b600502016000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000820160149054906101000a900460ff168160000160146101000a81548160ff021916908360ff1602179055506000820160159054906101000a900460ff168160000160156101000a81548160ff021916908360ff160217905550600182018160010190600361352b929190613eca565b506004820160009054906101000a900460ff168160040160006101000a81548160ff021916908360ff1602179055506004820160019054906101000a900460ff168160040160016101000a81548160ff021916908360ff1602179055506004820160029054906101000a900460ff168160040160026101000a81548160ff021916908360ff160217905550905050600481908060018154018082558091505060019003906000526020600020016000909190919091505550505050565b600073ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036136b0576040517fc147f17700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600480549050036136ef576040517fee7b13ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460008154811061370657613705614d75565b5b9060005260206000200154905060006007600083815260200190815260200160002060000160006002811061373e5761373d614d75565b5b6005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600460006137769190613f07565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000600381106137cd576137cc614d75565b5b015490506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160016003811061382857613827614d75565b5b015490506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160026003811061388357613882614d75565b5b015490506008600083815260200190815260200160002060000160009054906101000a900460ff166008600085815260200190815260200160002060000160009054906101000a900460ff166138d99190615195565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160006101000a81548160ff021916908360ff1602179055506008600082815260200190815260200160002060000160019054906101000a900460ff166008600085815260200190815260200160002060000160019054906101000a900460ff166139859190615195565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160016101000a81548160ff021916908360ff1602179055506001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160026101000a81548160ff021916908360ff160217905550600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060076000878152602001908152602001600020600001600160028110613aa357613aa2614d75565b5b600502016000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000820160149054906101000a900460ff168160000160146101000a81548160ff021916908360ff1602179055506000820160159054906101000a900460ff168160000160156101000a81548160ff021916908360ff1602179055506001820181600101906003613b80929190613eca565b506004820160009054906101000a900460ff168160040160006101000a81548160ff021916908360ff1602179055506004820160019054906101000a900460ff168160040160016101000a81548160ff021916908360ff1602179055506004820160029054906101000a900460ff168160040160026101000a81548160ff021916908360ff160217905550905050600160076000878152602001908152602001600020600a0160146101000a81548160ff02191690836002811115613c4857613c4761448c565b5b02179055503373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16867f76132b4934e8e1180c666b4faf8c43e62f31a77e7554cfe83fc6e66cd2a1b21c42604051613cab919061409e565b60405180910390a45050505050565b600080444284604051602001613cd293929190615233565b6040516020818303038152906040528051906020012060001c90508381613cf9919061529f565b9150600182613d0891906152d0565b91505092915050565b600033905090565b600060076000838152602001908152602001600020600a0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600260076000848152602001908152602001600020600a0160146101000a81548160ff02191690836002811115613d8e57613d8d61448c565b5b02179055508073ffffffffffffffffffffffffffffffffffffffff16827f7ab763991403f1ab5ef7acc377fba3a65b3c9a4b4cd6c17c86bc00898cd6771142604051613dda919061409e565b60405180910390a35050565b6040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600060ff168152602001600060ff168152602001613e2a613f28565b8152602001600060ff168152602001600060ff168152602001600060ff1681525090565b6040518060800160405280613e61613f4a565b8152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006002811115613e9757613e9661448c565b5b8152602001613ea4613f77565b81525090565b6040518060400160405280600060ff168152602001600060ff1681525090565b8260038101928215613ef6579182015b82811115613ef5578254825591600101919060010190613eda565b5b509050613f039190613f99565b5090565b5080546000825590600052602060002090810190613f259190613f99565b50565b6040518060600160405280600390602082028036833780820191505090505090565b60405180604001604052806002905b613f61613de6565b815260200190600190039081613f595790505090565b6040518060400160405280600290602082028036833780820191505090505090565b5b80821115613fb2576000816000905550600101613f9a565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613fff81613fca565b811461400a57600080fd5b50565b60008135905061401c81613ff6565b92915050565b60006020828403121561403857614037613fc0565b5b60006140468482850161400d565b91505092915050565b60008115159050919050565b6140648161404f565b82525050565b600060208201905061407f600083018461405b565b92915050565b6000819050919050565b61409881614085565b82525050565b60006020820190506140b3600083018461408f565b92915050565b6140c281614085565b81146140cd57600080fd5b50565b6000813590506140df816140b9565b92915050565b600080604083850312156140fc576140fb613fc0565b5b600061410a858286016140d0565b925050602061411b858286016140d0565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061415082614125565b9050919050565b61416081614145565b811461416b57600080fd5b50565b60008135905061417d81614157565b92915050565b60006020828403121561419957614198613fc0565b5b60006141a78482850161416e565b91505092915050565b6141b981614145565b82525050565b600060ff82169050919050565b6141d5816141bf565b82525050565b600060039050919050565b600081905092915050565b6000819050919050565b61420481614085565b82525050565b600061421683836141fb565b60208301905092915050565b6000602082019050919050565b614238816141db565b61424281846141e6565b925061424d826141f1565b8060005b8381101561427e578151614265878261420a565b965061427083614222565b925050600181019050614251565b505050505050565b6101208201600082015161429d60008501826141b0565b5060208201516142b060208501826141cc565b5060408201516142c360408501826141cc565b5060608201516142d6606085018261422f565b5060808201516142e960c08501826141cc565b5060a08201516142fc60e08501826141cc565b5060c08201516143106101008501826141cc565b50505050565b60006101208201905061432c6000830184614286565b92915050565b60006020828403121561434857614347613fc0565b5b6000614356848285016140d0565b91505092915050565b600060029050919050565b600081905092915050565b6000819050919050565b6101208201600082015161439660008501826141b0565b5060208201516143a960208501826141cc565b5060408201516143bc60408501826141cc565b5060608201516143cf606085018261422f565b5060808201516143e260c08501826141cc565b5060a08201516143f560e08501826141cc565b5060c08201516144096101008501826141cc565b50505050565b600061441b838361437f565b6101208301905092915050565b6000602082019050919050565b61443e8161435f565b614448818461436a565b925061445382614375565b8060005b8381101561448457815161446b878261440f565b965061447683614428565b925050600181019050614457565b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106144cc576144cb61448c565b5b50565b60008190506144dd826144bb565b919050565b60006144ed826144cf565b9050919050565b6144fd816144e2565b82525050565b600060029050919050565b600081905092915050565b6000819050919050565b600381106145345761453361448c565b5b50565b600081905061454582614523565b919050565b600061455582614537565b9050919050565b6145658161454a565b82525050565b6000614577838361455c565b60208301905092915050565b6000602082019050919050565b61459981614503565b6145a3818461450e565b92506145ae82614519565b8060005b838110156145df5781516145c6878261456b565b96506145d183614583565b9250506001810190506145b2565b505050505050565b6102c0820160008201516145fe6000850182614435565b5060208201516146126102408501826141b0565b5060408201516146266102608501826144f4565b50606082015161463a610280850182614590565b50505050565b60006102c08201905061465660008301846145e7565b92915050565b6003811061466957600080fd5b50565b60008135905061467b8161465c565b92915050565b6000806040838503121561469857614697613fc0565b5b60006146a6858286016140d0565b92505060206146b78582860161466c565b9150509250929050565b6146ca81614145565b82525050565b60006020820190506146e560008301846146c1565b92915050565b6146f4816144e2565b82525050565b600060208201905061470f60008301846146eb565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6147638261471a565b810181811067ffffffffffffffff821117156147825761478161472b565b5b80604052505050565b6000614795613fb6565b90506147a1828261475a565b919050565b600067ffffffffffffffff8211156147c1576147c061472b565b5b602082029050602081019050919050565b600080fd5b60006147ea6147e5846147a6565b61478b565b9050808382526020820190506020840283018581111561480d5761480c6147d2565b5b835b81811015614836578061482288826140d0565b84526020840193505060208101905061480f565b5050509392505050565b600082601f83011261485557614854614715565b5b81356148658482602086016147d7565b91505092915050565b600080fd5b600067ffffffffffffffff82111561488e5761488d61472b565b5b6148978261471a565b9050602081019050919050565b82818337600083830152505050565b60006148c66148c184614873565b61478b565b9050828152602081018484840111156148e2576148e161486e565b5b6148ed8482856148a4565b509392505050565b600082601f83011261490a57614909614715565b5b813561491a8482602086016148b3565b91505092915050565b600080600080600060a0868803121561493f5761493e613fc0565b5b600061494d8882890161416e565b955050602061495e8882890161416e565b945050604086013567ffffffffffffffff81111561497f5761497e613fc5565b5b61498b88828901614840565b935050606086013567ffffffffffffffff8111156149ac576149ab613fc5565b5b6149b888828901614840565b925050608086013567ffffffffffffffff8111156149d9576149d8613fc5565b5b6149e5888289016148f5565b9150509295509295909350565b6149fb81613fca565b82525050565b6000602082019050614a1660008301846149f2565b92915050565b6000819050919050565b6000614a41614a3c614a3784614125565b614a1c565b614125565b9050919050565b6000614a5382614a26565b9050919050565b6000614a6582614a48565b9050919050565b614a7581614a5a565b82525050565b6000602082019050614a906000830184614a6c565b92915050565b60008060408385031215614aad57614aac613fc0565b5b6000614abb8582860161416e565b9250506020614acc858286016140d0565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000602082019050919050565b6000614b1a82614ad6565b614b248185614ae1565b9350614b2f83614af2565b8060005b83811015614b60578151614b47888261420a565b9750614b5283614b02565b925050600181019050614b33565b5085935050505092915050565b60006020820190508181036000830152614b878184614b0f565b905092915050565b604082016000820151614ba560008501826141cc565b506020820151614bb860208501826141cc565b50505050565b6000604082019050614bd36000830184614b8f565b92915050565b600080600080600060a08688031215614bf557614bf4613fc0565b5b6000614c038882890161416e565b9550506020614c148882890161416e565b9450506040614c25888289016140d0565b9350506060614c36888289016140d0565b925050608086013567ffffffffffffffff811115614c5757614c56613fc5565b5b614c63888289016148f5565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614caa82614085565b915060008203614cbd57614cbc614c70565b5b600182039050919050565b6000819050919050565b6000614ced614ce8614ce384614cc8565b614a1c565b614085565b9050919050565b614cfd81614cd2565b82525050565b6000819050919050565b6000614d28614d23614d1e84614d03565b614a1c565b614085565b9050919050565b614d3881614d0d565b82525050565b6000606082019050614d5360008301866146c1565b614d606020830185614cf4565b614d6d6040830184614d2f565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b50565b6000614dbf600083614da4565b9150614dca82614daf565b600082019050919050565b6000614de082614db2565b9150819050919050565b6000606082019050614dff60008301866146c1565b614e0c602083018561408f565b614e19604083018461408f565b949350505050565b6000819050919050565b6000614e46614e41614e3c84614e21565b614a1c565b614085565b9050919050565b614e5681614e2b565b82525050565b6000606082019050614e7160008301866146c1565b614e7e6020830185614e4d565b614e8b6040830184614d2f565b949350505050565b6000614e9e82614085565b9150614ea983614085565b9250828202614eb781614085565b91508282048414831517614ece57614ecd614c70565b5b5092915050565b600082825260208201905092915050565b6000614ef3600083614ed5565b9150614efe82614daf565b600082019050919050565b6000608082019050614f1e60008301866146c1565b614f2b602083018561408f565b614f38604083018461408f565b8181036060830152614f4981614ee6565b9050949350505050565b6000614f5e82614085565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614f9057614f8f614c70565b5b600182019050919050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000615008602683614f9b565b915061501382614fac565b604082019050919050565b6000602082019050818103600083015261503781614ffb565b9050919050565b600060808201905061505360008301866146c1565b615060602083018561408f565b61506d6040830184614d2f565b818103606083015261507e81614ee6565b9050949350505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006150be602083614f9b565b91506150c982615088565b602082019050919050565b600060208201905081810360008301526150ed816150b1565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600061512a601f83614f9b565b9150615135826150f4565b602082019050919050565b600060208201905081810360008301526151598161511d565b9050919050565b600061516b826141bf565b9150615176836141bf565b9250828203905060ff81111561518f5761518e614c70565b5b92915050565b60006151a0826141bf565b91506151ab836141bf565b9250828201905060ff8111156151c4576151c3614c70565b5b92915050565b6000819050919050565b6151e56151e082614085565b6151ca565b82525050565b60008160601b9050919050565b6000615203826151eb565b9050919050565b6000615215826151f8565b9050919050565b61522d61522882614145565b61520a565b82525050565b600061523f82866151d4565b60208201915061524f82856151d4565b60208201915061525f828461521c565b601482019150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006152aa82614085565b91506152b583614085565b9250826152c5576152c4615270565b5b828206905092915050565b60006152db82614085565b91506152e683614085565b92508282019050808211156152fe576152fd614c70565b5b9291505056fea26469706673582212206a64e2d61acfbac41472e4e0b85ce5f149c0f7aa4cfba3eeac92a97328fb143b64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/CardBattle.sol:CardBattle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/CardBattle.sol:CardBattle",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2064,
        "contract": "contracts/CardBattle.sol:CardBattle",
        "label": "lastBattleId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2066,
        "contract": "contracts/CardBattle.sol:CardBattle",
        "label": "lastMintedChar",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2115,
        "contract": "contracts/CardBattle.sol:CardBattle",
        "label": "waitingBattleIds",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2120,
        "contract": "contracts/CardBattle.sol:CardBattle",
        "label": "players",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Player)2088_storage)"
      },
      {
        "astId": 2126,
        "contract": "contracts/CardBattle.sol:CardBattle",
        "label": "ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2131,
        "contract": "contracts/CardBattle.sol:CardBattle",
        "label": "battles",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(Battle)2104_storage)"
      },
      {
        "astId": 2136,
        "contract": "contracts/CardBattle.sol:CardBattle",
        "label": "tokens",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Token)2071_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_enum(Choice)2112)2_storage": {
        "base": "t_enum(Choice)2112",
        "encoding": "inplace",
        "label": "enum CardBattle.Choice[2]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Player)2088_storage)2_storage": {
        "base": "t_struct(Player)2088_storage",
        "encoding": "inplace",
        "label": "struct CardBattle.Player[2]",
        "numberOfBytes": "320"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_enum(BattleStatus)2108": {
        "encoding": "inplace",
        "label": "enum CardBattle.BattleStatus",
        "numberOfBytes": "1"
      },
      "t_enum(Choice)2112": {
        "encoding": "inplace",
        "label": "enum CardBattle.Choice",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Player)2088_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CardBattle.Player)",
        "numberOfBytes": "32",
        "value": "t_struct(Player)2088_storage"
      },
      "t_mapping(t_uint256,t_struct(Battle)2104_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CardBattle.Battle)",
        "numberOfBytes": "32",
        "value": "t_struct(Battle)2104_storage"
      },
      "t_mapping(t_uint256,t_struct(Token)2071_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CardBattle.Token)",
        "numberOfBytes": "32",
        "value": "t_struct(Token)2071_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Battle)2104_storage": {
        "encoding": "inplace",
        "label": "struct CardBattle.Battle",
        "members": [
          {
            "astId": 2093,
            "contract": "contracts/CardBattle.sol:CardBattle",
            "label": "playersInBattle",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Player)2088_storage)2_storage"
          },
          {
            "astId": 2095,
            "contract": "contracts/CardBattle.sol:CardBattle",
            "label": "winner",
            "offset": 0,
            "slot": "10",
            "type": "t_address"
          },
          {
            "astId": 2098,
            "contract": "contracts/CardBattle.sol:CardBattle",
            "label": "battleStatus",
            "offset": 20,
            "slot": "10",
            "type": "t_enum(BattleStatus)2108"
          },
          {
            "astId": 2103,
            "contract": "contracts/CardBattle.sol:CardBattle",
            "label": "moves",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_enum(Choice)2112)2_storage"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(Player)2088_storage": {
        "encoding": "inplace",
        "label": "struct CardBattle.Player",
        "members": [
          {
            "astId": 2073,
            "contract": "contracts/CardBattle.sol:CardBattle",
            "label": "playerAddr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2075,
            "contract": "contracts/CardBattle.sol:CardBattle",
            "label": "health",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2077,
            "contract": "contracts/CardBattle.sol:CardBattle",
            "label": "energy",
            "offset": 21,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2081,
            "contract": "contracts/CardBattle.sol:CardBattle",
            "label": "battleTokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)3_storage"
          },
          {
            "astId": 2083,
            "contract": "contracts/CardBattle.sol:CardBattle",
            "label": "battleAttack",
            "offset": 0,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 2085,
            "contract": "contracts/CardBattle.sol:CardBattle",
            "label": "battleDefense",
            "offset": 1,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 2087,
            "contract": "contracts/CardBattle.sol:CardBattle",
            "label": "battleMoveId",
            "offset": 2,
            "slot": "4",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Token)2071_storage": {
        "encoding": "inplace",
        "label": "struct CardBattle.Token",
        "members": [
          {
            "astId": 2068,
            "contract": "contracts/CardBattle.sol:CardBattle",
            "label": "attack",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2070,
            "contract": "contracts/CardBattle.sol:CardBattle",
            "label": "defense",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}